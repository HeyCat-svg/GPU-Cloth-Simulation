#pragma kernel TangentCompute

StructuredBuffer<float4> _Position;
StructuredBuffer<float4> _Normal;
StructuredBuffer<float2> _UVs;
StructuredBuffer<uint> _LinkInfo;
RWStructuredBuffer<float4> _Tangent;

uint _VerCountPerCol;
uint _VerCountPerRow;

// 计算p0的正则化切线向量
inline float3 calculateTan(float3 p0, float3 p1, float3 p2, float2 uv0, float2 uv1, float2 uv2, float3 normal) {
    float3 q0 = p1 - p0;
    float3 q1 = p2 - p0;

    float div = (uv1.x - uv0.x) * (uv2.y - uv0.y) - (uv1.y - uv0.y) * (uv2.x - uv0.x);
    float fact = 1.0 / div;
    float2x2 uvCoeffInv = float2x2(uv2.y - uv0.y, uv0.y - uv1.y, uv0.x - uv2.x, uv1.x - uv0.x);
    uvCoeffInv *= fact;

    float2x3 qMat = float2x3(q0, q1);
    float3 T = normalize(mul(uvCoeffInv[0], qMat));

    return normalize(T - dot(T, normal) * normal);
}

[numthreads(8, 8, 1)]
void TangentCompute(uint3 id : SV_DispatchThreadID) {
    const uint idx = mad(id.x, _VerCountPerRow, id.y);
    float3 p = _Position[idx].xyz;
    uint linkInfo = _LinkInfo[idx];

    float3 tan = float3(0, 0, 0);

    // row in [0, maxRow - 2] col in [0, maxCol - 2]
    if (id.x < _VerCountPerCol - 1 && id.y < _VerCountPerRow - 1) {
        if ((linkInfo & (0x1 << 1)) && (linkInfo & (0x1 << 2))) {
            tan = calculateTan(
                p,
                _Position[idx + 1].xyz,
                _Position[idx + _VerCountPerRow + 1].xyz,
                _UVs[idx],
                _UVs[idx + 1],
                _UVs[idx + _VerCountPerRow + 1],
                _Normal[idx].xyz
            );
        }
        else if ((linkInfo & (0x1 << 2)) && (linkInfo & (0x1 << 3))) {
            tan = calculateTan(
                p,
                _Position[idx + _VerCountPerRow + 1].xyz,
                _Position[idx + _VerCountPerRow].xyz,
                _UVs[idx],
                _UVs[idx + _VerCountPerRow + 1],
                _UVs[idx + _VerCountPerRow],
                _Normal[idx].xyz
            );
        }
        else if (id.y > 0 && (linkInfo & (0x1 << 4)) && (linkInfo & (0x1 << 3))) {
            tan = calculateTan(
                p,
                _Position[idx - 1].xyz,
                _Position[idx + _VerCountPerRow].xyz,
                _UVs[idx],
                _UVs[idx - 1],
                _UVs[idx + _VerCountPerRow],
                _Normal[idx].xyz
            );
        }
        else if (id.x > 0 && (linkInfo & (0x1 << 0)) && (linkInfo & (0x1 << 1))) {
            tan = calculateTan(
                p,
                _Position[idx + 1].xyz,
                _Position[idx - _VerCountPerRow].xyz,
                _UVs[idx],
                _UVs[idx + 1],
                _UVs[idx - _VerCountPerRow],
                _Normal[idx].xyz
            );
        }
        else if (id.x > 0 && id.y > 0 && (linkInfo & (0x1 << 4)) && (linkInfo & (0x1 << 5))) {
            tan = calculateTan(
                p,
                _Position[idx - 1].xyz,
                _Position[idx - _VerCountPerRow - 1].xyz,
                _UVs[idx],
                _UVs[idx - 1],
                _UVs[idx - _VerCountPerRow - 1],
                _Normal[idx].xyz
            );
        }
        else if (id.x > 0 && id.y > 0 && (linkInfo & (0x1 << 5)) && (linkInfo & (0x1 << 0))) {
            tan = calculateTan(
                p,
                _Position[idx - _VerCountPerRow].xyz,
                _Position[idx - _VerCountPerRow - 1].xyz,
                _UVs[idx],
                _UVs[idx - _VerCountPerRow],
                _UVs[idx - _VerCountPerRow - 1],
                _Normal[idx].xyz
            );
        }
        else {
            // empty
        }
    }
    // row in [0, maxRow - 2] col = maxCol - 1
    else if (id.x < _VerCountPerCol - 1 && id.y == _VerCountPerRow - 1) {
        if ((linkInfo & (0x1 << 4)) && (linkInfo & (0x1 << 3))) {
            tan = calculateTan(
                p,
                _Position[idx - 1].xyz,
                _Position[idx + _VerCountPerRow].xyz,
                _UVs[idx],
                _UVs[idx - 1],
                _UVs[idx + _VerCountPerRow],
                _Normal[idx].xyz
            );
        }
        else if (id.x > 0 && (linkInfo & (0x1 << 4)) && (linkInfo & (0x1 << 5))) {
            tan = calculateTan(
                p,
                _Position[idx - 1].xyz,
                _Position[idx - _VerCountPerRow - 1].xyz,
                _UVs[idx],
                _UVs[idx - 1],
                _UVs[idx - _VerCountPerRow - 1],
                _Normal[idx].xyz
            );
        }
        else if (id.x > 0 && (linkInfo & (0x1 << 5)) && (linkInfo & (0x1 << 0))) {
            tan = calculateTan(
                p,
                _Position[idx - _VerCountPerRow].xyz,
                _Position[idx - _VerCountPerRow - 1].xyz,
                _UVs[idx],
                _UVs[idx - _VerCountPerRow],
                _UVs[idx - _VerCountPerRow - 1],
                _Normal[idx].xyz
            );
        }
        else {
            // empty
        }
    }
    // row = maxRow - 1 col in [0, maxCol - 2]
    else if(id.x == _VerCountPerCol - 1 && id.y < _VerCountPerRow - 1) {
        if ((linkInfo & (0x1 << 0)) && (linkInfo & (0x1 << 1))) {
            tan = calculateTan(
                p,
                _Position[idx + 1].xyz,
                _Position[idx - _VerCountPerRow].xyz,
                _UVs[idx],
                _UVs[idx + 1],
                _UVs[idx - _VerCountPerRow],
                _Normal[idx].xyz
            );
        }
        else if (id.y > 0 && (linkInfo & (0x1 << 4)) && (linkInfo & (0x1 << 5))) {
            tan = calculateTan(
                p,
                _Position[idx - 1].xyz,
                _Position[idx - _VerCountPerRow - 1].xyz,
                _UVs[idx],
                _UVs[idx - 1],
                _UVs[idx - _VerCountPerRow - 1],
                _Normal[idx].xyz
            );
        }
        else if (id.y > 0 && (linkInfo & (0x1 << 5)) && (linkInfo & (0x1 << 0))) {
            tan = calculateTan(
                p,
                _Position[idx - _VerCountPerRow].xyz,
                _Position[idx - _VerCountPerRow - 1].xyz,
                _UVs[idx],
                _UVs[idx - _VerCountPerRow],
                _UVs[idx - _VerCountPerRow - 1],
                _Normal[idx].xyz
            );
        }
        else {
            // empty
        }
    }
    // row = maxRow - 1 col = maxCol - 1
    else {
        if ((linkInfo & (0x1 << 4)) && (linkInfo & (0x1 << 5))) {
            tan = calculateTan(
                p,
                _Position[idx - 1].xyz,
                _Position[idx - _VerCountPerRow - 1].xyz,
                _UVs[idx],
                _UVs[idx - 1],
                _UVs[idx - _VerCountPerRow - 1],
                _Normal[idx].xyz
            );
        }
        else if ((linkInfo & (0x1 << 5)) && (linkInfo & (0x1 << 0))) {
            tan = calculateTan(
                p,
                _Position[idx - _VerCountPerRow].xyz,
                _Position[idx - _VerCountPerRow - 1].xyz,
                _UVs[idx],
                _UVs[idx - _VerCountPerRow],
                _UVs[idx - _VerCountPerRow - 1],
                _Normal[idx].xyz
            );
        }
        else {
            // empty
        }
    }

    tan = (dot(tan, tan) == 0) ? float3(0, 1, 0) : tan;

    _Tangent[idx] = float4(tan, -1);    // 左手系的缘故 bitangent cross之后要反向
}